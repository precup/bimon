; Howdy, new user!
; It's recommended to copy this file to your own config.ini and edit it there.
; Want to just get started?
; The only thing you actually need to configure is in the [Compilation] section.

[General]
; The range of commits to use by default.
; This is the range of commits that will be precompiled with the update command
; unless you specify a different range with the --range flag.
; Any git reference is valid here, including branches, tags, and commit hashes.
; Choosing master for the end value is recommended so you stay up to date.
range_start = 4.0-stable
range_end = origin/master

; BiMon needs a Godot repository to work with.
; It is advised to not touch this value and simply let BiMon clone and 
; manage its own repository.
; Change this at your own risk.
workspace_path = ./godot

; Whether to add the issue number to MRP titles for quick reference
add_issue_to_title = True


[Output]
; The number of rows of subcommand output to show in LIVE mode.
subwindow_rows = 9
; By default BiMon tries to place tags on the histogram to give you a sense
; of time. This is only slow the first time it shows, but if that's a problem here you go.
show_tags_on_histogram = True
; Whether to use unicode characters for the progress bar and other output.
; If false, uses Codepage 437 characters instead. Really just meant for Windows conhost users.
unicode_enabled = False
; Whether BiMon should print with colors if the terminal supports it.
color_enabled = True

; Below are the colors used in various outputs for quick customization.
; Text colors may be (bold|dark)? (black|red|green|yellow|blue|purple|cyan|white)
; They may also be an ansi color codes (ex. 1;31)
; BG colors may be (dark)? (black|red|green|yellow|blue|purple|cyan|white)
message_color = bold blue
important_color = bold blue
good_color = bold green
commit_color = dark yellow
error_color = bold red
warning_color = bold yellow
progress_foreground_color = bold white
progress_background_color = 48;5;234
heatmap_colors = 38;5;232 38;5;233 38;5;234 38;5;235 38;5;236 38;5;237 38;5;238 38;5;239 38;5;240 38;5;241 38;5;242 38;5;243 38;5;244 38;5;245 38;5;246 38;5;247 38;5;248 38;5;249 38;5;250 38;5;251 38;5;252 38;5;253 38;5;254 38;5;255


[Compression]
; The default settings are carefully tuned to get a great compression ratio,
; but they require a lot of RAM to get good results and produce archives
; that are slow to decompress.

; You can turn it off if you hate having disk space I guess
use_compression = True

; This switches compression between bzip and lzma.
; Zip is faster, especially for decompression, but results in far worse compression ratios.
; If you have a lot of extra storage or are using a small range, turning on 
; use_zip in tests resulted in 8x faster decompression (8s -> 1s)
; but came with a 25% compression ratio (50 MB each) instead of lzma's 4% (8 MB each).
; Compression is technically also faster, but only by a second or two per commit.
; Turning this on disables all other compression settings and commits are packed in their own zip files.
; There's no point to packing more than one per zip file because bzip's dictionary size is garbage.
use_zip = False

; If you're running out of RAM, lowering the block size will save you at the cost of 
; dramatically reducing the compression ratio. Honestly, if you have to change this,
; you should probably just use the zip option instead.
block_size = 256m

; The number of godot binaries to pack into a single bundle. 
; There's no benefit to making this higher than your block_size / your uncompressed binary size.
pack_size = 20


[Compilation]
; This name MUST match the name of the binary your compiler flags creates.
; This can vary for a few reasons and BiMon will fail to run if this is wrong.
binary_name = bin/godot.linuxbsd.editor.x86_64.llvm

; A backup name to use if the above isn't found. This is really only useful if the name has changed
; over time, like if you had to run some builds with a different compiler to get them to compile successfully.
backup_binary_name_regex = bin/godot.[^.]+.editor.x86_64(.llvm)?

; The paths to cache in the archive as the result of a build. 
; On most systems, this is just the binary, but if you have extra/different files you want to 
; cache, like a symbol table or the bundle on Mac, you can add them here.
; Relative to workspace_path, {BINARY_NAME} will be replaced with the variable above.
archive_paths = {BINARY_NAME}

; These Compilation settings are important because they impact speed, not correctness.
; You can experiment with flags outside of BiMon to find the best settings for your system.

; These settings require no extra dependencies and have been tested on a few systems
; without issue. If you haven't spent time optimizing your build, this is a good place to start.
; compiler_flags = platform=linuxbsd dev_build=no scu_build=yes optimize=none
; library_flags = 

; However, they are not the fastest settings possible. The following settings
; are an example of faster settings for a Linux Mint 22.1 system, but they require
; a lot of extra dependencies to be installed and are platform dependent.
; See the official Godot documentation for more information.
compiler_flags = platform=linuxbsd use_llvm=yes linker=mold dev_build=no scu_build=yes optimize=none
; Had problems with embree on all builds, problems with miniupnpc and mbedtls on certain commit ranges
library_flags = builtin_enet=no builtin_libogg=no builtin_libtheora=no builtin_libvorbis=no builtin_libwebp=no builtin_pcre2=no builtin_zstd=no builtin_harfbuzz=no builtin_libpng=no builtin_freetype=no builtin_graphite=no builtin_zlib=no


[Execution]
; If > 0, while bisecting interactively, the two possible next commits to test will be extracted on a
; background thread while you're testing the current commit. Decompression is relatively slow, so this
; helps speed up the bisection process if you've got a couple extra cores, but may not be worth it on some systems.
; A value of 1 will decompress the next 2 possible commits, 2 will decompress the next 4 after those, etc;
; it's the number of layers to descend in the binary tree.
background_decompression_layers = 1
; The default parameters to pass to the Godot binary when running it.
; If {PROJECT} is present, it will be replaced with the path (trailing slash included) 
; of the folder that contains the project.godot file.
; Some examples:
; Open the project in the editor
execution_parameters = --path {PROJECT} -e
; Run a specific scene without opening the editor
; execution_parameters = --path {PROJECT} {PROJECT}scene.tscn
; Just run the project manager, no project will be required
; execution_parameters = -p