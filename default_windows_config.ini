; Howdy, new user!
; It's recommended to copy this file to your own config.ini and edit it there.
; Want to just get started?
; Just double check that [Archiving] > executable_path looks correct for your system.

[General]
; The range of commits to use by default for update.
; Any git reference is valid here, including branches, tags, and commit hashes.
; Choosing master for the end value is recommended so you stay up to date.
default_range_start = 4.0-stable
default_range_end = origin/master

; Whether to add the issue number to MRP titles for easy reference.
autoupdate_project_titles = True


[Compilation]
; The flags can be tuned for your system to get the best performance.
; Check the official Godot documentation for more information on the available flags.
; compiler_flags are passed to scons when building Godot.
; library_flags are passed after the compiler_flags and are just separate for convenience.

; These settings require no extra dependencies and have been tested on a few systems without issue. 
; If you haven't spent time optimizing the build on your machine, this is probably pretty good.
compiler_flags = platform=windows dev_build=no scu_build=yes optimize=none
library_flags = 

; They're probably not the fastest settings possible for your machine. The following settings
; are an example of faster settings for a Linux Mint system, but they require a lot of extra 
; dependencies to be installed and are platform dependent.
; compiler_flags = platform=linuxbsd use_llvm=yes linker=mold dev_build=no scu_build=yes optimize=none
; library_flags = builtin_enet=no builtin_libogg=no builtin_libtheora=no builtin_libvorbis=no builtin_libwebp=no builtin_pcre2=no builtin_zstd=no builtin_harfbuzz=no builtin_libpng=no builtin_freetype=no builtin_graphite=no builtin_zlib=no


[Archiving]
; This name MUST match the name of the binary your compiler flags results in.
; This can vary for a few reasons and BiMon will fail to run if this is wrong.
executable_path = bin/godot.windows.editor.x86_64.exe

; You can turn it off if you hate having disk space I guess
; Get that lightning fast startup time
; If you run compress manually it'll still compress either way
compression_enabled = True

; The paths to cache in the archive as the result of a build. 
; On most systems, this is just the binary, but if you have extra/different files you want to 
; cache, like a symbol table or the bundle on Mac, you can add them here.
; Relative to workspace_path. {EXECUTABLE_PATH} will be replaced with the variable above.
artifact_paths = {EXECUTABLE_PATH}

; After compiling, it's faster to just move the artifacts to the cache than it is to copy them.
; If you're archiving something you don't want to disappear on you, you can turn this on.
copy_on_cache = False

; The number of godot versions to pack into a single compressed bundle.
bundle_size = 25


[Execution]
; The default arguments to pass to the Godot binary when running it.
; If {PROJECT} is present, it will be replaced with the path (trailing slash included) 
; of the folder that contains the project.godot file. The working directory will be set 
; to this path, so it's usually not necessary to include it in the arguments.
; Some examples:
; Open the project in the editor
default_execution_arguments = -e
; Run a specific scene without opening the editor
; default_execution_arguments = scene.tscn
; Just run the project manager, no project will be required
; default_execution_arguments = -p

; A backup path regex to run if the executable_path from [Archiving] isn't found. 
; This is really only useful if the name has changed over time, like if you had to run some 
; builds with a different compiler to get them to compile successfully or used a different
; linker on older builds.
backup_executable_regex = bin/godot.[^.]+.editor.x86_64(.llvm)?(.exe)?

; When running a commit from storage, BiMon might extract it and leave it there.
; If you're bisecting a lot, this can add up to a lot of space quickly.
; Autoclean will delete all but the most recently used extracted versions
; when using run or bisect so they don't build up over time.
autoclean_duplicates = False
; The number of most recently used versions to keep around.
autoclean_limit = 5

; While bisecting across a commit range, BiMon can start the extraction of the files
; for the next steps on background threads during testing of the current commit.
; The number of decompressions is 2^this number. I don't really see a reason 
; to set this to anything besides 0, 1, or at most 2.
background_decompression_layers = 1
; This is the number of threads to use for the background decompression.
extraction_pool_size = 2


[Output]
; Whether to use unicode characters for the progress bar and other output.
; If False, uses codepage 437 characters instead. Really just meant for Windows conhost users.
unicode_enabled = False
; By default BiMon tries to place tags on the histogram to give you a sense of time. 
; This is only slow to compute the first time it prints, but if you hate that, here you go.
show_tags_on_histogram = True
; The number of rows of subcommand output to show in LIVE mode.
subwindow_rows = 9

; Whether BiMon should print with colors if the terminal supports it.
color_enabled = True
; Below are the colors used in various outputs for quick customization.
; Text colors may be (bold|dark)? (black|red|green|yellow|blue|purple|cyan|white)
; They may also be an ansi color codes (ex. 1;31)
; BG colors may be (dark)? (black|red|green|yellow|blue|purple|cyan|white)
message_color = bold purple
important_color = bold green
good_color = bold green
reference_color = dark yellow
error_color = bold red
warning_color = bold yellow
progress_foreground_color = 38;2;255;255;255
progress_background_color = 48;5;234
; List of colors from empty to full. 24 bit colors will be interpolated.
heatmap_colors = 38;2;28;28;28 38;2;255;255;255
